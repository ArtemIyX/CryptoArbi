// <auto-generated />
using System;
using ArbiDataLib.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArbiWriter.Migrations
{
    [DbContext(typeof(ArbiDbContext))]
    partial class ArbiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ArbiDataLib.Models.ExchangeEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.Property<bool>("Working")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Exchanges");
                });

            modelBuilder.Entity("ArbiDataLib.Models.ExchangeToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<double?>("Ask")
                        .HasColumnType("double");

                    b.Property<double?>("AskVolume")
                        .HasColumnType("double");

                    b.Property<double?>("Bid")
                        .HasColumnType("double");

                    b.Property<double?>("BidVolume")
                        .HasColumnType("double");

                    b.Property<double?>("DayVolumeUSDT")
                        .HasColumnType("double");

                    b.Property<bool>("Deposit")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ExchangeId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullSymbolName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("current_timestamp(6)");

                    b.Property<bool>("Withdraw")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("ArbiDataLib.Models.ExchangeTokenNetwork", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Deposit")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("ExchangeTokenId")
                        .HasColumnType("bigint");

                    b.Property<double?>("Fee")
                        .HasColumnType("double");

                    b.Property<bool>("Withdraw")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeTokenId");

                    b.ToTable("Networks");
                });

            modelBuilder.Entity("ArbiDataLib.Models.ExchangeToken", b =>
                {
                    b.HasOne("ArbiDataLib.Models.ExchangeEntity", "Exchange")
                        .WithMany("Tokens")
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exchange");
                });

            modelBuilder.Entity("ArbiDataLib.Models.ExchangeTokenNetwork", b =>
                {
                    b.HasOne("ArbiDataLib.Models.ExchangeToken", "Token")
                        .WithMany("Networks")
                        .HasForeignKey("ExchangeTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Token");
                });

            modelBuilder.Entity("ArbiDataLib.Models.ExchangeEntity", b =>
                {
                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("ArbiDataLib.Models.ExchangeToken", b =>
                {
                    b.Navigation("Networks");
                });
#pragma warning restore 612, 618
        }
    }
}
